#include <iostream>
#include <vector>
#include <queue>
#include <unordered_set>
#include<map>
using namespace std;
class Graph{
    public:
    void addEdge(int u ,  int v){
        adj[u].push_back(v);
        adj[v].push_back(u);
    }
    void BFS(int start){
        unordered_set<int>visited;
        queue<int> q;
        q.push(start);
        visited.insert(start);
        while(!q.empty()){
            int node = q.front();
            q.pop();
            cout<<node<<" ";
            for(int neighbor:adj[node]){
                if(visited.find(neighbor) == visited.end()){
                    visited.insert(neighbor);
                    q.push(neighbor);
                }
            }
        }
        cout<<endl;
    }
    private: 
    map<int,vector<int>>adj;
};
int main() {
    Graph g;

    // Adding edges to the graph
    g.addEdge(0, 1);
    g.addEdge(0, 2);
    g.addEdge(1, 3);
    g.addEdge(2, 4);
    g.addEdge(3, 5);
    
    // Perform BFS starting from node 0
    cout << "BFS traversal starting from node 0: ";
    g.BFS(0);

    return 0;
}
