# DFS uses STACK data structure 

#include <iostream>
#include <vector>
#include <unordered_set>

using namespace std;

class Graph {
public:
    // Function to add an edge to the graph
    void addEdge(int u, int v) {
        adj[u].push_back(v);
        adj[v].push_back(u); // For undirected graph, add both directions
    }

    // DFS algorithm to traverse the graph from a given starting node
    void dfs(int start) {
        unordered_set<int> visited;  // Set to keep track of visited nodes
        dfsHelper(start, visited);   // Call the helper function to perform DFS
        cout << endl;
    }

private:
    unordered_map<int, vector<int>> adj; // Adjacency list representation of the graph

    // Helper function for recursive DFS
    void dfsHelper(int node, unordered_set<int>& visited) {
        visited.insert(node);  // Mark the current node as visited
        cout << node << " ";   // Print the current node
        
        // Recurse for all the unvisited adjacent nodes
        for (int neighbor : adj[node]) {
            if (visited.find(neighbor) == visited.end()) {
                dfsHelper(neighbor, visited);
            }
        }
    }
};

int main() {
    Graph g;

    // Adding edges to the graph
    g.addEdge(0, 1);
    g.addEdge(0, 2);
    g.addEdge(1, 3);
    g.addEdge(2, 4);
    g.addEdge(3, 5);
    
    // Perform DFS starting from node 0
    cout << "DFS traversal starting from node 0: ";
    g.dfs(0);

    return 0;
}
